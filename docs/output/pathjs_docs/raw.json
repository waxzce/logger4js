{"majorversion": 2, "classmap": {"Logger": {"name": "Logger", "constructors": [{"params": [{"type": "number", "name": "lvl", "description": "  the actual level of logging"}, {"type": "object", "name": "loggerimpl", "description": "  an implementation of LoggerImpl : the object use to log"}, {"type": "object", "name": "levels", "description": "  an occurence of Levels : the definition of logging level"}], "description": "class for managing logs\n<br/> NB : some method are generated \n<br/> method name : level (like info, warning, error...)\n<br/> 2 params : txt to log, obj, to log"}], "namespace": "", "module": "logger4js", "guessedname": "Logger", "methods": {"initialize": {"protected": "", "params": [{"type": "number", "name": "lvl", "description": "  the actual level of logging"}, {"type": "object", "name": "loggerimpl", "description": "  an implementation of LoggerImpl : the object use to log"}, {"type": "object", "name": "levels", "description": "  an occurence of Levels : the definition of logging level"}], "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "_log_wrapper": {"return": {"type": "function", "description": "a generated function for logging with the good level"}, "description": "wrapper for logging - private", "private": "", "params": [{"type": "function", "name": "lvl", "description": "  the level of the wrapper function (usualy a function of Levels)"}], "guessedname": "_log_wrapper", "guessedtype": "function"}, "log": {"params": [{"type": "number", "name": "lvl", "description": "  the level of the log. normal way is using the Levels function."}, {"type": "string", "name": "what", "description": "  the content you want to log"}, {"type": "object", "name": "obj", "description": "  content you want to log -> an object"}], "description": "log something - NB : use the generated log level named mathod in the most case", "guessedname": "log", "guessedtype": "function"}}, "file": "Logger.js", "guessedtype": "function", "shortname": "Logger", "description": "class for managing logs\n<br/> NB : some method are generated \n<br/> method name : level (like info, warning, error...)\n<br/> 2 params : txt to log, obj, to log"}, "Levels": {"name": "Levels", "constructors": [{"params": [{"type": "array", "name": "lvls", "description": "  an array of string names of the logging level in the good order"}], "description": "class for levels of logging management. like info, error, warning..."}], "namespace": "", "module": "logger4js", "guessedname": "Levels", "methods": {"initialize": {"protected": "", "params": [{"type": "array", "name": "lvls", "description": "  an array of string names of the logging level in the good order"}], "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "getName": {"return": {"type": "string", "description": "the name of the level"}, "params": [{"type": "number", "name": "lvl", "description": "  lvl you want the name"}], "description": "compute name of logger lvl", "guessedname": "getName", "guessedtype": "function"}, "_log_wrapper": {"return": {"type": "function", "description": "a generated function returning the number of the logging level"}, "description": "wrapper for levels - private", "private": "", "params": [{"type": "number", "name": "lvl", "description": "  the level of the wrapper function"}], "guessedname": "_log_wrapper", "guessedtype": "function"}}, "file": "Levels.js", "guessedtype": "function", "shortname": "Levels", "description": "class for levels of logging management. like info, error, warning..."}, "DefaultLoggerImpl": {"name": "DefaultLoggerImpl", "constructors": [{"description": "class LoggerImpl : log with console.log"}], "namespace": "", "module": "logger4js", "guessedname": "DefaultLoggerImpl", "methods": {"initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "what", "description": "  the content you want to log"}, {"type": "number", "name": "lvl", "description": "  the level of the log. normal way is using the Levels function."}, {"type": "object", "name": "obj", "description": "  content you want to log -> an object"}, {"type": "object", "name": "logger", "description": "  the Logger occurence -> use to know"}], "description": "log something", "guessedname": "log", "guessedtype": "function"}}, "file": "DefaultLoggerImpl.js", "guessedtype": "function", "shortname": "DefaultLoggerImpl", "description": "class LoggerImpl : log with console.log"}}, "version": "1", "modules": {"logger4js": {"name": "logger4js", "submodules": [], "classlist": ["DefaultLoggerImpl", "Levels", "Logger"], "filelist": ["bindings.js", "DefaultLoggerImpl.js", "Levels.js", "Logger.js"], "subdata": {}, "guessedname": "DefaultLoggerImpl", "guessedtype": "function"}}, "filemap": {"Levels.js": {"classlist": ["Levels"], "name": "Levels.js", "module": "logger4js"}, "DefaultLoggerImpl.js": {"classlist": ["DefaultLoggerImpl"], "name": "DefaultLoggerImpl.js", "module": "logger4js"}, "Logger.js": {"classlist": ["Logger"], "name": "Logger.js", "module": "logger4js"}, "bindings.js": {"name": "bindings.js", "classlist": [], "module": "logger4js", "guessedname": "log", "guessedtype": "property", "property": "log"}}}